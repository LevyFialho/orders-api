{
  "GIM": {
    "ApplicationKey": "00a7447b-2524-4684-b794-51dab879b97f", //Our application's key in the authentication provider
    "Address": "https://gim.stone.com.br", //Authentication provider URL
    "MockAuthentication": true
  },

  "ConnectionStrings": {
    "EventStoreDatabase": "Server=sqlserver;Database=master;User=sa;Password=XDR56tfc!@;" //Event store connection string for healthchecking
  },

  "IntegrationSettings": {
    "ProcessingRetryInterval": 5, // minutes
    "ProcessingRetryLimit": 60, //minutes
    "SettlementVerificationInterval": -1, //minutes
    "SettlementVerificationLimit": 4320 // minutes (3 days)
  },

  "ManagementConfiguration": { //healthcheck components

    "SqlServerComponents": [
      {
        "Name": "EventStoreDatabase",
        "ConnectionStringName": "EventStoreDatabase",
        "Critical": true
      }
    ],
    "HttpComponents": [
      {
        "Name": "GIM",
        "Address": "https://gim.stone.com.br",
        "Critical": true
      },
      {
        "Name": "AcquirerAPI",
        "Address": "http://financial-acquirer-api-stg.buy4np.local:8999",
        "Critical": false
      }
    ],
    "MongoDbComponents": [
      {
        "Name": "mongodb",
        "ConnectionString": "mongodb://mongodb:27017",
        "DatabaseName": "financial-charging-api",
        "Critical": true
      }
    ],
    "RedisComponents": [
      {
        "Name": "redis",
        "ConnectionString": "redis",
        "Critical": true
      }
    ],
    "RabbitMqComponents": [
      {
        "Name": "rabbitmq",
        "Critical": true,
        "HostName": "rabbitmq",
        "Port": "15672",
        "UserName": "guest",
        "Password": "guest"
      }
    ]
  },

  "CerberusSettings": { //LOG in cerberus Settings
    "maximumLogEntriesPerRequest": 10,
    "minimumLogLevel": "Info",
    "serviceEndpoint": "http://dev-logger.stone.com.br:8733/v1/log"
  },

  "HttpClientSettings": { //Http client settings for resilience configuration
    "UseResilientHttp": false,
    "HttpClientRetryCount": 5,
    "HttpClientExceptionsAllowedBeforeBreaking": 3
  },

  "MessageBrokerSettings": { //Event hub message broker settings
    "MessageBusType": 1, //0 - In Memory, 1- RabbitMQ, 2-Azure Service Bus
    "RetryCount": 5,
    "EventBusSubscriptionClientName": "",
    "ClearSubscriptionOnStartup": false,
    "MinimumRetryBackoffSeconds": 0,
    "MaximumRetryBackoffSeconds": 0,
    "EventBusMaxConcurrentCalls": 0,
    "EventBusConnection": "",
    "EventBusPrefetchCount": 0,
    "CommandBusSubscriptionClientName": "",
    "CommandBusPrefetchCount": 0,
    "CommandBusConnection": "",
    "UseDefaultCommandScheduler": true,
    "RabbitMqCommandBusUserName": "",
    "RabbitMqCommandBusQueueName": "financial-charging-api-queue",
    "RabbitMqCommandBusPassword": "",
    "RabbitMqCommandBusBrokerName": "financial-charging-api-command-broker",
    "RabbitMqCommandBusConnection": "rabbitmq",
    "RabbitMqConnection": "rabbitmq",
    "RabbitMqUserName": "",
    "RabbitMqPassword": "",
    "RabbitMqQueueName": "financial-charging-api",
    "RabbitMqBrokerName": "financial-charging-api-broker"
  },

  "RedisSettings": { //Redis snapshot and command scheduler provider settings
    "SnapshotConnectionString": "redis",
    "SnapshotFrequency": 0,
    "SnapshotMinutesToExpire": 10
  },

  "HangfireSettings": { //Redis snapshot and command scheduler provider settings
    "RedisConnectionString": "redis",
    "Prefix": "hangfire:financial-charging-api:",
    "Timeout": 3, //hours
    "UseHangfire": true,
    "UseHangfireCommandScheduler": false,
    "ExpiryCheckInterval": 60, //seconds
    "UseTransactions": true,
    "FetchTimeout": 5, //seconds
    "EnqueueJobRetryCount": 3,
    "DashboardPath": "/hangfire",
    "MongoDatabaseName": "financial-charging-api-hangfire",
    "StorageType": 0 //0- redis, 1-mongodb
  },

  "SqlServerEventStoreSettings": { //Sql server event store settings
    "ConnectionStringSqlite": "Data Source=myevents.db", //If using sqllite
    "ConnectionString": "Server=sqlserver;Database=FinancialCharging;User=sa;Password=XDR56tfc!@;",
    "UseSqlite": false,
    "UseInMemory": false,
    "ApplyMigrations": true,
    "MaxRetryDelaySeconds": 3,
    "MaxRetryCounts": 2,
    "EventLogRepublishSchedule": "*/30 * * * *" //hourly
  },

  "MongoSettings": { //MongoDB Projections storage settings
    "ConnectionString": "mongodb://mongodb:27017",
    "DatabaseName": "financial-charging-api",
    "UseAzureCosmosDb": false,
    "AllowSkip": true,
    "SeekLimit": 100000
  },

  "SwaggerSettings": {
    "ContactEmail": "financeiroti.cobranca@stone.com.br",
    "ContactName": "Financeiro TI",
    "ContactUrl": "http://stone.com.br",
    "LicenseName": "StoneCO",
    "LicenseUrl": "http://stone.com.br",
    "Description": "Financial Charging API",
    "TermsOfService": "StoneCO",
    "Title": "Financial Charging API",
    "DeprecationMessage": "This API version has been deprecated."
  },

  "AcquirerApiSettings": {
    "ApplicationUri": "http://acquirer-api",
    "PosRentKey": "Aluguel Stone",
    "PosRentChargeTypeCode": "1",
    "ExternalPosRentKey": "Aluguel Parceiros",
    "ExternalPosRentChargeTypeCode": "2",
    "DefaultChargeTypeCode": "0",
    "DefaultCurrencyCode": "BRL",
    "AuthenticationToken": "bdf983a0-e251-434d-87b0-9e9f25a7ad29",
    "UseMockApi": true
  },

  "Logging": {
    "IncludeScopes": true,
    "LogLevel": {
      "Default": "Critical",
      "Microsoft": "Critical",
      "OrdersApi.Application.Middleware": "Debug"
    }
  },

  "ApplicationInsights": {
    "InstrumentationKey": "172b8900-ad53-4a87-a840-ad3811d18fb2",
    "IsEnabled": false,
    "UseLogging": true,
    "IncludeEventId": true,
    "LogLevel": 3 //warning
  },
  "DocumentStoreSettings": {
    "Type": 1 //1 - MongoDB, 2- RavenDB, 3 - CosmosDB
  },
  "RavenDbSettings": {
    "Urls": [
      "1"
    ],
    "DatabaseName": "financial-charging-api",
    "UseOptimisticConcurency": true,
    "MaxNumberOfRequestsPerSession": null,
    "NoTracking": false,
    "NoCaching": false,
    "TransactionMode": 0 //0- SingleNode, 1-ClusterWide
  },
  "AcquirerSettlementVerificationSettings": {
    "JobExecutionCronExpression": "", //hourly
    "ChargesPerExecution": 1000
  }
}
