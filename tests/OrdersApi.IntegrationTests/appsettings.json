{
  "GIM": {
    "ApplicationKey": "XPTO", //Our application's key in the authentication provider
    "Address": "https://gim.stone.com.br", //Authentication provider URL
    "MockAuthentication": true
  },

  "ConnectionStrings": {
    "EventStoreDatabase": "Server=tcp:financial-charging-sql-dev-1.database.windows.net,1433;Initial Catalog=financial-charging-db;Persist Security Info=False;User ID=financial-charging-admin;Password=NJI90okm!@#;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;" //Event store connection string for healthchecking
  },

  "IntegrationSettings": {
    "ProcessingRetryInterval": 5, // minutes
    "ProcessingRetryLimit": 60, //minutes
    "SettlementVerificationInterval": -1, //minutes
    "SettlementVerificationLimit": 4320 // minutes (3 days)
  },

  "ManagementConfiguration": { //healthcheck components
    "SqlServerComponents": [
      {
        "Name": "EventStoreDatabase",
        "ConnectionStringName": "EventStoreDatabase",
        "Critical": true
      }
    ],
    "HttpComponents": [
      {
        "Name": "GIM",
        "Address": "https://gim.stone.com.br",
        "AcceptedHttpResponseStatus": [ 200 ],
        "Critical": false
      },
      {
        "Name": "AcquirerAPI",
        "Address": "http://172.19.55.214:8999/management/app-info",
        "AcceptedHttpResponseStatus": [ 200 ],
        "Headers": [
          {
            "Header": "Authorization",
            "Value": "bdf983a0-e251-434d-87b0-9e9f25a7ad29"
          }
        ],
        "Critical": false
      },
      {
        "Name": "Cerberus",
        "Address": "http://dev-logger.stone.com.br:8733/v1/log",
        "AcceptedHttpResponseStatus": [ 200, 405 ],
        "Critical": false
      }
    ],
    "MongoDbComponents": [
      {
        "Name": "mongodb",
        "ConnectionString": "mongodb://financial-charging-dev-1:FWBG1ZeOm0m1QD9Shk9nFMAWIbuLrCWhyKIDkWt6jqRXTVDQ3sA3Eiqz4N650k7ucDP3dm05HeQIQoXCV5MJZw==@financial-charging-dev-1.documents.azure.com:10255/?ssl=true&replicaSet=globaldb",
        "DatabaseName": "financial-charging-api",
        "Critical": true
      }
    ],
    "RedisComponents": [
      {
        "Name": "redis",
        "ConnectionString": "financial-charging-dev.redis.cache.windows.net:6380,password=D53XJ8qYfBUXOGMDs5YJFCNqYrHfaNyfjI0WMa459pg=,ssl=True,abortConnect=False",
        "Critical": false
      }
    ]
  },

  "CerberusSettings": { //LOG in cerberus Settings
    "maximumLogEntriesPerRequest": 10,
    "minimumLogLevel": "Info",
    "serviceEndpoint": "http://dev-logger.stone.com.br:8733/v1/log"
  },

  "HttpClientSettings": { //Http client settings for resilience configuration
    "UseResilientHttp": false,
    "HttpClientRetryCount": 5,
    "HttpClientExceptionsAllowedBeforeBreaking": 3
  },

  "MessageBrokerSettings": { //Event hub message broker settings
    "MessageBusType": 2, //0 - In Memory, 1- RabbitMQ, 2-Azure Service Bus
    "RetryCount": 5,
    "ClearSubscriptionOnStartup": false,
    "EventBusSubscriptionClientName": "financial-charging-api",
    "MinimumRetryBackoffSeconds": 1,
    "MaximumRetryBackoffSeconds": 5,
    "EventBusMaxConcurrentCalls": 10,
    "CommandBusMaxConcurrentCalls": 1,
    "EventBusPrefetchCount": 0,
    "EventBusConnection": "Endpoint=sb://financial-charging-dev-1.servicebus.windows.net/;SharedAccessKeyName=financial-charging-api;SharedAccessKey=qP2K3HnzpldcvG8gwdJoSizfoLnEhMG3XclD0iCSWbc=;EntityPath=financial-charging",
    "CommandBusConnection": "Endpoint=sb://financial-charging-dev-1.servicebus.windows.net/;SharedAccessKeyName=financial-charging-api-queue-sas;SharedAccessKey=qZuCb08DuAXhtDVD9VXyvdgTSG/b/Tvco52KydAgO1U=;EntityPath=financial-charging-api-queue",
    "CommandBusPrefetchCount": 0,
    "UseDefaultCommandScheduler": true,
    "RabbitMqCommandBusUserName": "",
    "RabbitMqCommandBusQueueName": "",
    "RabbitMqCommandBusPassword": "",
    "RabbitMqCommandBusBrokerName": "",
    "RabbitMqCommandBusConnection": "",
    "RabbitMqUserName": "",
    "RabbitMqQueueName": "",
    "RabbitMqPassword": "",
    "RabbitMqBrokerName": "",
    "RabbitMqConnection": "",
    "ScopeName": "auto_fac_scope"
  },

  "RedisSettings": { //Redis snapshot and command scheduler provider settings
    "SnapshotConnectionString": "financial-charging-dev.redis.cache.windows.net:6380,password=D53XJ8qYfBUXOGMDs5YJFCNqYrHfaNyfjI0WMa459pg=,ssl=True,abortConnect=False",
    "SnapshotFrequency": 0,
    "SnapshotMinutesToExpire": 10
  },

  "HangfireSettings": { //Redis snapshot and command scheduler provider settings
    "RedisConnectionString": "financial-charging-dev.redis.cache.windows.net:6380,password=D53XJ8qYfBUXOGMDs5YJFCNqYrHfaNyfjI0WMa459pg=,ssl=True,abortConnect=False",
    "Prefix": "hangfire:financial-charging-api:",
    "Timeout": 3, //hours
    "ExpiryCheckInterval": 60, //seconds
    "UseTransactions": true,
    "FetchTimeout": 5, //seconds
    "UseHangfire": true,
    "UseHangfireCommandScheduler": false,
    "EnqueueJobRetryCount": 3,
    "DashboardPath": "/hangfire",
    "MongoDatabaseName": "financial-charging-api-hangfire",
    "StorageType": 0 //0- redis, 1-mongodb
  },

  "SqlServerEventStoreSettings": { //Sql server event store settings
    "ConnectionStringSqlite": "Data Source=myevents.db", //If using sqllite
    "ConnectionString": "Server=tcp:financial-charging-sql-dev-1.database.windows.net,1433;Initial Catalog=financial-charging-db;Persist Security Info=False;User ID=financial-charging-admin;Password=NJI90okm!@#;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;", //Default connection for SQL Server
    "UseSqlite": false,
    "UseInMemory": false,
    "ApplyMigrations": true,
    "MaxRetryDelaySeconds": 3,
    "MaxRetryCounts": 2, 
    "EventLogRepublishSchedule": "" 
  },

  "MongoSettings": { //MongoDB Projections storage settings
    "ConnectionString": "mongodb://financial-charging-dev-1:FWBG1ZeOm0m1QD9Shk9nFMAWIbuLrCWhyKIDkWt6jqRXTVDQ3sA3Eiqz4N650k7ucDP3dm05HeQIQoXCV5MJZw==@financial-charging-dev-1.documents.azure.com:10255/?ssl=true&replicaSet=globaldb",
    "DatabaseName": "financial-charging-api",
    "UseAzureCosmosDb": false,
    "AllowSkip": false,
    "SeekLimit": 100000
  },

  "SwaggerSettings": {
    "ContactEmail": "financeiroti.cobranca@stone.com.br",
    "ContactName": "Financeiro TI",
    "ContactUrl": "http://stone.com.br",
    "LicenseName": "StoneCO",
    "LicenseUrl": "http://stone.com.br",
    "Description": "Financial Charging API",
    "TermsOfService": "StoneCO",
    "Title": "Financial Charging API",
    "DeprecationMessage": "This API version has been deprecated."
  },

  "AcquirerApiSettings": {
    "ApplicationUri": "http://acquirer-api",
    "PosRentKey": "Aluguel",
    "PosRentChargeTypeCode": "1",
    "ExternalPosRentKey": "AluguelParceiros",
    "ExternalPosRentChargeTypeCode": "2",
    "DefaultChargeTypeCode": "0",
    "DefaultCurrencyCode": "BRL",
    "AuthenticationToken": "bdf983a0-e251-434d-87b0-9e9f25a7ad29",
    "UseMockApi": true
  },

  "Logging": {
    "IncludeScopes": true,
    "LogLevel": {
      "Default": "Warning",
      "OrdersApi.Application": "Debug"
    }
  },

  "ApplicationInsights": {
    "InstrumentationKey": "172b8900-ad53-4a87-a840-ad3811d18fb2",
    "IsEnabled": true,
    "UseLogging": true,
    "IncludeEventId": true,
    "LogLevel": 3 //warning
  },

  "SnapshotCollectorConfiguration": {
    "IsEnabledInDeveloperMode": true,
    "ThresholdForSnapshotting": 1,
    "MaximumSnapshotsRequired": 3,
    "MaximumCollectionPlanSize": 50,
    "ReconnectInterval": "00:15:00",
    "ProblemCounterResetInterval": "1.00:00:00",
    "SnapshotsPerTenMinutesLimit": 1,
    "SnapshotsPerDayLimit": 30,
    "SnapshotInLowPriorityThread": true,
    "ProvideAnonymousTelemetry": true,
    "FailedRequestLimit": 3
  },
  "DocumentStoreSettings": {
    "Type": 1 //1 - MongoDB, 2- RavenDB, 3 - CosmosDB
  },
  "RavenDbSettings": {
    "Urls": [
      "1"
    ],
    "DatabaseName": "financial-charging-api",
    "UseOptimisticConcurency": true,
    "MaxNumberOfRequestsPerSession": null,
    "NoTracking": false,
    "NoCaching": false,
    "TransactionMode": 0 //0- SingleNode, 1-ClusterWide
  },
  "AcquirerSettlementVerificationSettings": {
    "JobExecutionCronExpression": "", //hourly
    "ChargesPerExecution": 1000
  }
}
